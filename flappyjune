package com.mygdx.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.Rectangle;

import java.awt.Color;
import java.util.Random;

public class Flappy extends ApplicationAdapter {
	SpriteBatch batch;
	Texture background;
	Texture[] birds;
	int flapstate = 0;
	float birdY = 0;
	float velocity = 0;
	Circle birdCircle;
	//ShapeRenderer shapeRenderer;
    Texture gameover;
    int score = 0;
    int scoringTube = 0;
    BitmapFont font;

	int gameState = 0;
	float gravity = 2;
	Texture topTube;
	Texture bottomTube;
	float gap = 400;
	float maxTubeOffset;
	Random randomGenerator;

	float tubeVelocity = 4;
	int numberofTubes = 4;
	float[] tubeX = new float[numberofTubes];
	float[] tubeOffset = new float[numberofTubes];
	float distanceBetweenTubes;
	Rectangle[] toptubeRectangles;
	Rectangle[] bottomtubeRectangles;

	@Override
	public void create() {
		//shapeRenderer = new ShapeRenderer();
		birdCircle = new Circle();
		gameover = new Texture("gameover.png");
		font = new BitmapFont();
		font.setColor(com.badlogic.gdx.graphics.Color.WHITE);
		font.getData().setScale(10);
		batch = new SpriteBatch();
		//background = new Texture("bg.png");

		background = new Texture("ckc.png");
		birds = new Texture[2];
		//birds[0] = new Texture("bird.png");
		//birds[1] = new Texture("bird2.png");
		birds[0] = new Texture("nawong.jpg");
		birds[1] = new Texture("nawong.jpg");

		//topTube = new Texture("toptube.png");
		//bottomTube = new Texture("bottomtube.png");
		topTube = new Texture("Corjesu.png");
		bottomTube = new Texture("College.png");
		maxTubeOffset = Gdx.graphics.getHeight() / 2 - gap / 2 - 100;
		randomGenerator = new Random();
		distanceBetweenTubes = Gdx.graphics.getWidth() * 3 / 4;
		toptubeRectangles = new Rectangle[numberofTubes];
		bottomtubeRectangles = new Rectangle[numberofTubes];

		startgame();

	}

	public void startgame() {

        birdY = Gdx.graphics.getHeight() / 2 - birds[flapstate].getWidth() / 2;
        for (int i = 0; i < numberofTubes; i++) {

            tubeOffset[i] = (randomGenerator.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - gap - 200);
            tubeX[i] = Gdx.graphics.getWidth() / 2 - topTube.getWidth() / 2 + Gdx.graphics.getWidth() + i * distanceBetweenTubes;

            toptubeRectangles[i] = new Rectangle();
            bottomtubeRectangles[i] = new Rectangle();
        }


    }

	@Override
	public void render() {

		batch.begin();
		batch.draw(background, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());


		if (gameState == 1) {

            if(tubeX[scoringTube] < Gdx.graphics.getWidth()){
                score ++;

                Gdx.app.log("Score", String.valueOf(score));

                if (scoringTube < numberofTubes - 1 ){

                    scoringTube ++;
                }
                else {
                    scoringTube = 0;

                }
            }

			if (Gdx.input.justTouched()) {

				velocity = -25;

			}
			for (int i = 0; i < numberofTubes; i++) {

				if (tubeX[i] < -topTube.getWidth()) {
					tubeX[i] += numberofTubes * distanceBetweenTubes;
					tubeOffset[i] = (randomGenerator.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - gap - 200);

					toptubeRectangles[i] = new Rectangle();
					bottomtubeRectangles[i] = new Rectangle();

				} else {
					tubeX[i] = tubeX[i] - tubeVelocity;



				}


				batch.draw(topTube, tubeX[i], Gdx.graphics.getHeight() / 2 + gap / 2 + tubeOffset[i]);
				batch.draw(bottomTube, tubeX[i], Gdx.graphics.getHeight() / 2 - gap / 2 - bottomTube.getHeight() + tubeOffset[i]);

				toptubeRectangles[i] = new Rectangle(tubeX[i], Gdx.graphics.getHeight() / 2 + gap / 2 + tubeOffset[i], topTube.getWidth(), topTube.getHeight());
				bottomtubeRectangles[i] = new Rectangle(tubeX[i], Gdx.graphics.getHeight() / 2 - gap / 2 - bottomTube.getHeight() + tubeOffset[i], bottomTube.getWidth(), bottomTube.getHeight());
			}

			if (birdY > 0 ) {
				velocity = velocity + gravity;
				birdY -= velocity;
			} else {

                gameState = 2;
            }

		} else if (gameState == 0){


			if (Gdx.input.isTouched()) {

				Gdx.app.log("Touched", "Yep");

				gameState = 1;
			}


		}
		else if (gameState == 2){

		    batch.draw(gameover , Gdx.graphics.getWidth() / 2 - gameover.getWidth() / 2, Gdx.graphics.getHeight() / 2 - gameover.getHeight() / 2);

            if (Gdx.input.justTouched()) {

                gameState = 1;
                startgame();
                score = 0;
                scoringTube = 0;
                velocity = 0 ;
            }
        }

		if (flapstate == 0) {
			flapstate = 1;

		} else {
			flapstate = 0;

		}


		batch.draw(birds[flapstate], Gdx.graphics.getWidth() / 2 - birds[flapstate].getWidth() / 2, birdY);
		font.draw(batch, String.valueOf(score), 100, 200);
		batch.end();
		birdCircle.set(Gdx.graphics.getWidth() / 2, birdY + birds[flapstate].getHeight() / 2, birds[flapstate].getWidth() / 2);
		//shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
		//shapeRenderer.setColor(com.badlogic.gdx.graphics.Color.RED);


		//shapeRenderer.circle(birdCircle.x , birdCircle.y, birdCircle.radius);
		for (int i = 0; i < numberofTubes; i++) {

			//shapeRenderer.rect(tubeX[i],Gdx.graphics.getHeight() / 2 + gap / 2 + tubeOffset[i], topTube.getWidth(), topTube.getHeight());
			//shapeRenderer.rect(tubeX[i],Gdx.graphics.getHeight() / 2 - gap / 2 - bottomTube.getHeight() + tubeOffset[i], bottomTube.getWidth(), bottomTube.getHeight());


			if (Intersector.overlaps(birdCircle, toptubeRectangles[i]) || Intersector.overlaps(birdCircle, bottomtubeRectangles[i])) {
				gameState = 2;


			}


		}

		//shapeRenderer.end();
	}

}

